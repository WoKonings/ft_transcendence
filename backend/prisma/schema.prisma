generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  intraId     Int       @unique @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String           
  avatar      String?
  twoFactorSecret    String?
  twoFactorEnabled   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  socket      String?

  isOnline    Boolean   @default(false)
  isInGame    Boolean   @default(false)
  isInQueue   Boolean   @default(false)
  isBad       Boolean   @default(false)

  friends     Int[]
  blocked     Int[]
  pending     Int[]
  channels    Channel[] @relation("UserChannels") // Implicit many-to-many relation

  games       Game[]    @relation("PlayerGames")
  gamesWon    Game[]    @relation("GameWinner")
  gamesPlayed Int       @default(0)
  gameWins    Int       @default(0)
  elo         Int       @default(600)
}

model Channel {
  id           Int           @id @default(autoincrement())
  messages     String[]
  banned       String[]
  name         String        @unique
  private      Boolean
  password     String?
  admin        Int[]
  userChannels UserChannel[]
  users        User[]        @relation("UserChannels")
}

model UserChannel {
  userId    Int
  channelId Int
  role      ChannelRole
  channel   Channel     @relation(fields: [channelId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, channelId])
}

model Game {
  id               Int      @id @default(autoincrement())
  playerScores     Int[]
  playerEloChanges Int[]
  winnerId         Int
  endTime          DateTime @default(now())
  startTime        DateTime @default(now())
  winner           User     @relation("GameWinner", fields: [winnerId], references: [id])
  players          User[]   @relation("PlayerGames")
}

enum ChannelRole {
  ADMIN
  MEMBER
}
