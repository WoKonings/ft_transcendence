// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//  todo: 2fa, rooms
//
model User {
  // account info
  id          Int       @id @default(autoincrement())
  // intraId     Int       @unique //should replace username/email?
  username    String    @unique 
  email       String    @unique //maybe no email needed?
  password    String            //also no password needed
  socket      String?

  // status
  isOnline    Boolean   @default(false) //todo: fully implement
  isInGame    Boolean   @default(false)
  isInQueue   Boolean   @default(false)
  isBad       Boolean   @default(false)

  // social
  friends     Int[]
  blocked     Int[]
  pending     Int[]

  // stats
  games       Game[]    @relation("PlayerGames")
  gamesWon    Game[]    @relation("GameWinner")
  gamesPlayed Int       @default(0)
  createdAt   DateTime  @default(now())
  elo         Int       @default(600)
}

model Channel {

  id        Int		 @id @default(autoincrement())
  name      String @unique
  password  String?
  admin     String?
  private   Boolean
  //users
  users	  String[]
  banned  String[]
  // kicked   Int[]
  // invited  Int[]

  messages  String[]
}

model Game {
  id               Int       @id @default(autoincrement())
  players          User[]    @relation("PlayerGames")
  playerScores     Int[]     // Scores for each player, order corresponds to players list
  playerEloChanges Int[]
  winner           User      @relation("GameWinner", fields: [winnerId], references: [id])
  winnerId         Int
  startTime        DateTime  @default(now())
  endTime          DateTime  @default(now())
}